////////////////////////////////////////[All Documentation]////////////////////////////////////////
//Jimmy Souilliere
//This copy includes currently unused methods


//////////TO DO

//////////WORK IN PROGRESS

//////////DONE
//import edu.wpi.first.wpilibj.TimedRobot;
//import edu.wpi.first.wpilibj.CounterBase.EncodingType;
//import edu.wpi.first.wpilibj.interfaces.Accelerometer;
//import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
//import edu.wpi.first.wpilibj.AnalogInput;
//import edu.wpi.first.wpilibj.Encoder;
//import edu.wpi.first.wpilibj.Joystick;
//import edu.wpi.first.wpilibj.PWM;
//import edu.wpi.first.wpilibj.BuiltInAccelerometer;



////////////////////////////////////////[TITLE]////////////////////////////////////////

//////////Import

//////////Constructor

//////////Methods

/////Used:

/////Unused:



////////////////////////////////////////Timed Robot////////////////////////////////////////

//////////Import

//import edu.wpi.first.wpilibj.TimedRobot;

//////////Constructor

//protected TimedRobot()
//Constructor for TimedRobot.

//protected TimedRobot​(double period)
//Constructor for TimedRobot.
//period - Period in seconds.

//////////Methods

/////Used:

/////Unused:

//public void close()
//Specified by: close in interface AutoCloseable
//Overrides: close in class RobotBase

//public void startCompetition()
//Provide an alternate "main loop" via startCompetition().
//Specified by: startCompetition in class IterativeRobotBase

//public void endCompetition()
//Ends the main loop in startCompetition().
//Specified by: endCompetition in class RobotBase

//public void addPeriodic​(Runnable callback, double periodSeconds)
//Add a callback to run at a specific period.
//This is scheduled on TimedRobot's Notifier, so TimedRobot and the callback run synchronously. Interactions between them are thread-safe.
//callback - The callback to run.
//periodSeconds - The period at which to run the callback in seconds.

//public void addPeriodic​(Runnable callback, double periodSeconds, double offsetSeconds)
//Add a callback to run at a specific period with a starting time offset.
//This is scheduled on TimedRobot's Notifier, so TimedRobot and the callback run synchronously. Interactions between them are thread-safe.
//callback - The callback to run.
//periodSeconds - The period at which to run the callback in seconds.
//offsetSeconds - The offset from the common starting time in seconds. This is useful for scheduling a callback in a different timeslot relative to TimedRobot.



////////////////////////////////////////Encoding Type////////////////////////////////////////

//////////Import

//import edu.wpi.first.wpilibj.CounterBase.EncodingType;

//////////Constructor

//////////Methods

/////Used:

/////Unused:

//public static CounterBase.EncodingType[] values()
//Returns an array containing the constants of this enum type, in the order they are declared.
//Returns: an array containing the constants of this enum type, in the order they are declared

//public static CounterBase.EncodingType valueOf​(String name)
//Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)
//name - the name of the enum constant to be returned.
// Returns: the enum constant with the specified name
//Throws:
//IllegalArgumentException - if this enum type has no constant with the specified name
//NullPointerException - if the argument is null



////////////////////////////////////////Accelerometer////////////////////////////////////////

//////////Import

//import edu.wpi.first.wpilibj.interfaces.Accelerometer;

//////////Constructor

//////////Methods

/////Used:

//double getX()
//Common interface for getting the x-axis acceleration.
//Returns: The acceleration along the x-axis in g-forces

//double getY()
//Common interface for getting the y-axis acceleration.
//Returns: The acceleration along the y-axis in g-forces

/////Unused:

//void setRange​(Accelerometer.Range range)
//Common interface for setting the measuring range of an accelerometer.
//range - The maximum acceleration, positive or negative, that the accelerometer will measure. Not all accelerometers support all ranges.

//double getZ()
//Common interface for getting the z axis acceleration.
//Returns: The acceleration along the z axis in g-forces



////////////////////////////////////////WPI_TalonSRX////////////////////////////////////////

//////////Import

//import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

//////////Constructor

//public WPI_TalonSRX(int deviceNumber)
//Constructor for motor controller
//deviceNumber - device ID of motor controller

//////////Methods

/////Used:

//public void set(double speed)	
//Common interface for setting the speed of a simple speed controller.
//speed - The speed to set. Value should be between -1.0 and 1.0. Value is also saved for Get().

//public void setInverted(boolean isInverted)	
//Common interface for inverting direction of a speed controller.
//isInverted - The state of inversion, true is inverted.


/////Unused:

//public void close()

//public void disable()	
//Common interface for disabling a motor.

//public void feed()	
//Feed the motor safety object.
//Resets the timer on this object that is used to do the timeouts.

//public double get()	
//Common interface for getting the current set speed of a speed controller.
//Return: The current set speed. Value is between -1.0 and 1.0.

//public String getDescription()	
//Return: description of controller

//public double getExpiration()	
//Retrieve the timeout value for the corresponding motor safety object.
//Return: the timeout value in seconds.

//public boolean getInverted()	
//Common interface for returning the inversion state of a speed controller.
//Return: The state of inversion, true is inverted.

//public void initSendable(SendableBuilder builder)	
//Initialize sendable
//builder - Base sendable to build on

//public boolean isAlive()	
//Determine of the motor is still operating or has timed out.
//Return: a true value if the motor is still operating normally and hasn't timed out.

//public boolean isSafetyEnabled()	
//Return the state of the motor safety enabled flag.
//Return if the motor safety is currently enabled for this device.
//Return: True if motor safety is enforced for this device

//public void set(ControlMode mode, double demand0, DemandType demand1Type, double demand1)
//mode - Sets the appropriate output on the talon, depending on the mode.
//demand0 - The output value to apply. such as advanced feed forward and/or auxiliary close-looping in firmware. In PercentOutput, the output is between -1.0 and 1.0, with 0.0 as stopped. In Current mode, output value is in amperes. In Velocity mode, output value is in position change / 100ms. In Position mode, output value is in encoder ticks or an analog value, depending on the sensor. See In Follower mode, the output value is the integer device ID of the talon to duplicate.
//demand1Type - The demand type for demand1. Neutral: Ignore demand1 and apply no change to the demand0 output. AuxPID: Use demand1 to set the target for the auxiliary PID 1. ArbitraryFeedForward: Use demand1 as an arbitrary additive value to the demand0 output. In PercentOutput the demand0 output is the motor output, and in closed-loop modes the demand0 output is the output of PID0.
//demand1 - Supplmental output value. Units match the set mode.

//public void set(ControlMode mode, double value)		
//Sets the appropriate output on the talon, depending on the mode.
//mode - The output mode to apply. In PercentOutput, the output is between -1.0 and 1.0, with 0.0 as stopped. In Current mode, output value is in amperes. In Velocity mode, output value is in position change / 100ms. In Position mode, output value is in encoder ticks or an analog value, depending on the sensor. In Follower mode, the output value is the integer device ID of the talon to duplicate.
//value - The setpoint value, as described above.

//public void setExpiration(double expirationTime)	
//Set the expiration time for the corresponding motor safety object.
//expirationTime - The timeout value in seconds.

//public void setSafetyEnabled(boolean enabled)	
//Enable/disable motor safety for this device.
//Turn on and off the motor safety option for this PWM object.
//enabled - True if motor safety is enforced for this object

//public void setVoltage(double outputVolts)	
//Sets the voltage output of the SpeedController. Compensates for the current bus voltage to ensure that the desired voltage is output even if the battery voltage is below 12V - highly useful when the voltage outputs are "meaningful" (e.g. they come from a feedforward calculation).
//NOTE: This function must be called regularly in order for voltage compensation to work properly - unlike the ordinary set function, it is not "set it and forget it."
//outputVolts - The voltage to output.

//public void stopMotor()	
//Common interface to stop the motor until Set is called again.



////////////////////////////////////////Analog Input////////////////////////////////////////

//////////Import

//import edu.wpi.first.wpilibj.AnalogInput;

//////////Constructor

//public AnalogInput​(int channel)
//Construct an analog channel.
//channel - The channel number to represent. 0-3 are on-board 4-7 are on the MXP port.

//////////Methods

/////Used:

/////Unused:

//public void close()
//Specified by: close in interface AutoCloseable

//public int getValue()
//Get a sample straight from this channel. The sample is a 12-bit value representing the 0V to 5V range of the A/D converter. The units are in A/D converter codes. Use GetVoltage() to get the analog value in calibrated units.
//Returns: A sample straight from this channel.

//public int getAverageValue()
//Get a sample from the output of the oversample and average engine for this channel. The sample is 12-bit + the bits configured in SetOversampleBits(). The value configured in setAverageBits() will cause this value to be averaged 2^bits number of samples. This is not a sliding window. The sample will not change until 2^(OversampleBits + AverageBits) samples have been acquired from this channel. Use getAverageVoltage() to get the analog value in calibrated units.
//Returns: A sample from the oversample and average engine for this channel.

//public double getVoltage()
//Get a scaled sample straight from this channel. The value is scaled to units of Volts using the calibrated scaling data from getLSBWeight() and getOffset().
//Returns: A scaled sample straight from this channel.

//public double getAverageVoltage()
//Get a scaled sample from the output of the oversample and average engine for this channel. The value is scaled to units of Volts using the calibrated scaling data from getLSBWeight() and getOffset(). Using oversampling will cause this value to be higher resolution, but it will update more slowly. Using averaging will cause this value to be more stable, but it will update more slowly.
//Returns:
//A scaled sample from the output of the oversample and average engine for this channel.

//public long getLSBWeight()
//Get the factory scaling the least significant bit weight constant. The least significant bit weight constant for the channel that was calibrated in manufacturing and stored in an eeprom.
//Volts = ((LSB_Weight * 1e-9) * raw) - (Offset * 1e-9)
//Returns: Least significant bit weight.

//public int getOffset()
//Get the factory scaling offset constant. The offset constant for the channel that was calibrated in manufacturing and stored in an eeprom.
//Volts = ((LSB_Weight * 1e-9) * raw) - (Offset * 1e-9)
//Returns: Offset constant.

//public int getChannel()
//Get the channel number.
//Returns: The channel number.

//public void setAverageBits​(int bits)
//Set the number of averaging bits. This sets the number of averaging bits. The actual number of averaged samples is 2^bits. The averaging is done automatically in the FPGA.
//bits - The number of averaging bits.

//public int getAverageBits()
//Get the number of averaging bits. This gets the number of averaging bits from the FPGA. The actual number of averaged samples is 2^bits. The averaging is done automatically in the FPGA.
//Returns: The number of averaging bits.

//public void setOversampleBits​(int bits)
//Set the number of oversample bits. This sets the number of oversample bits. The actual number of oversampled values is 2^bits. The oversampling is done automatically in the FPGA.
//bits - The number of oversample bits.

//public int getOversampleBits()
//Get the number of oversample bits. This gets the number of oversample bits from the FPGA. The actual number of oversampled values is 2^bits. The oversampling is done automatically in the FPGA.
//Returns: The number of oversample bits.

//public void initAccumulator()
//Initialize the accumulator.

//public void setAccumulatorInitialValue​(long initialValue)
//Set an initial value for the accumulator.
//This will be added to all values returned to the user.
//initialValue - The value that the accumulator should start from when reset.

//public void resetAccumulator()
//Resets the accumulator to the initial value.

//public void setAccumulatorCenter​(int center)
//Set the center value of the accumulator.
//The center value is subtracted from each A/D value before it is added to the accumulator. This is used for the center value of devices like gyros and accelerometers to take the device offset into account when integrating.
//This center value is based on the output of the oversampled and averaged source the accumulator channel. Because of this, any non-zero oversample bits will affect the size of the value for this field.
//center - The accumulator's center value.

//public void setAccumulatorDeadband​(int deadband)
//Set the accumulator's deadband.
//deadband - The deadband size in ADC codes (12-bit value)

//public long getAccumulatorValue()
//Read the accumulated value.
//Read the value that has been accumulating. The accumulator is attached after the oversample and average engine.
//Returns: The 64-bit value accumulated since the last Reset().

//public long getAccumulatorCount()
//Read the number of accumulated values.
//Read the count of the accumulated values since the accumulator was last Reset().
//Returns: The number of times samples from the channel were accumulated.

//public void getAccumulatorOutput​(AccumulatorResult result)
//Read the accumulated value and the number of accumulated values atomically.
//This function reads the value and count from the FPGA atomically. This can be used for averaging.
//result - AccumulatorResult object to store the results in.

//public boolean isAccumulatorChannel()
//Is the channel attached to an accumulator.
//Returns: The analog channel is attached to an accumulator.

//public static void setGlobalSampleRate​(double samplesPerSecond)
//Set the sample rate per channel.
//This is a global setting for all channels. The maximum rate is 500kS/s divided by the number of channels in use. //This is 62500 samples/s per channel if all 8 channels are used.
//samplesPerSecond - The number of samples per second.

//public static double getGlobalSampleRate()
//Get the current sample rate.
//This assumes one entry in the scan list. This is a global setting for all channels.
//Returns: Sample rate.

//public void setSimDevice​(SimDevice device)
//Indicates this input is used by a simulated device.
//device - simulated device handle

//public void initSendable​(SendableBuilder builder)
//Initializes this Sendable object.
//Specified by: initSendable in interface Sendable
//builder - sendable builder



////////////////////////////////////////Encoder////////////////////////////////////////

//////////Import
//import edu.wpi.first.wpilibj.Encoder;

//////////Constructor

//public Encoder​(int channelA, int channelB, boolean reverseDirection)
//Encoder constructor. Construct a Encoder given a and b channels.
//The encoder will start counting immediately.
//channelA - The 'a' channel DIO channel. 0-9 are on-board, 10-25 are on the MXP port
//channelB - The 'b' channel DIO channel. 0-9 are on-board, 10-25 are on the MXP port
//reverseDirection - represents the orientation of the encoder and inverts the output values if necessary so forward represents positive values.

//public Encoder​(int channelA, int channelB)
//Encoder constructor. Construct an Encoder given a and b channels.
//The encoder will start counting immediately.
//channelA - The a channel digital input channel.
//channelB - The b channel digital input channel.

//public Encoder​(int channelA, int channelB, boolean reverseDirection, CounterBase.EncodingType encodingType)
//Encoder constructor. Construct an Encoder given a and b channels.
//The encoder will start counting immediately.
//channelA - The a channel digital input channel.
//channelB - The b channel digital input channel.
//reverseDirection - represents the orientation of the encoder and inverts the output values if necessary so forward represents positive values.
//encodingType - either k1X, k2X, or k4X to indicate 1X, 2X or 4X decoding. If 4X is selected, then an encoder FPGA object is used and the returned counts will be 4x the encoder spec'd value since all rising and falling edges are counted. If 1X or 2X are selected, then a counter object will be used and the returned value will either exactly match the spec'd count or be double (2x) the spec'd count.

//public Encoder​(int channelA, int channelB, int indexChannel, boolean reverseDirection)
//Encoder constructor. Construct an Encoder given a and b channels. Using an index pulse forces 4x encoding
//The encoder will start counting immediately.
//channelA - The a channel digital input channel.
//channelB - The b channel digital input channel.
//indexChannel - The index channel digital input channel.
//reverseDirection - represents the orientation of the encoder and inverts the output values if necessary so forward represents positive values.

//public Encoder​(int channelA, int channelB, int indexChannel)
//Encoder constructor. Construct an Encoder given a and b channels. Using an index pulse forces 4x encoding
//The encoder will start counting immediately.
//channelA - The a channel digital input channel.
//channelB - The b channel digital input channel.
//indexChannel - The index channel digital input channel.

//public Encoder​(DigitalSource sourceA, DigitalSource sourceB, boolean reverseDirection)
//Encoder constructor. Construct an Encoder given a and b channels as digital inputs. This is used in the case where the digital inputs are shared. The Encoder class will not allocate the digital inputs and assume that they already are counted.
//The encoder will start counting immediately.
//sourceA - The source that should be used for the 'a' channel.
//sourceB - the source that should be used for the 'b' channel.
//reverseDirection - represents the orientation of the encoder and inverts the output values if necessary so forward //represents positive values.

//public Encoder​(DigitalSource sourceA, DigitalSource sourceB)
//Encoder constructor. Construct an Encoder given a and b channels as digital inputs. This is used in the case where the digital inputs are shared. The Encoder class will not allocate the digital inputs and assume that they already are counted.
//The encoder will start counting immediately.
//sourceA - The source that should be used for the 'a' channel.
//sourceB - the source that should be used for the 'b' channel.

//public Encoder​(DigitalSource sourceA, DigitalSource sourceB, boolean reverseDirection, CounterBase.EncodingType encodingType)
//Encoder constructor. Construct an Encoder given a and b channels as digital inputs. This is used in the case where the digital inputs are shared. The Encoder class will not allocate the digital inputs and assume that they already are counted.
//The encoder will start counting immediately.
//sourceA - The source that should be used for the 'a' channel.
//sourceB - the source that should be used for the 'b' channel.
//reverseDirection - represents the orientation of the encoder and inverts the output values if necessary so forward represents positive values.
//encodingType - either k1X, k2X, or k4X to indicate 1X, 2X or 4X decoding. If 4X is selected, then an encoder FPGA object is used and the returned counts will be 4x the encoder spec'd value since all rising and falling edges are counted. If 1X or 2X are selected then a counter object will be used and the returned value will either exactly match the spec'd count or be double (2x) the spec'd count.

//public Encoder​(DigitalSource sourceA, DigitalSource sourceB, DigitalSource indexSource, boolean reverseDirection)
//Encoder constructor. Construct an Encoder given a, b and index channels as digital inputs. This is used in the case where the digital inputs are shared. The Encoder class will not allocate the digital inputs and assume that they already are counted.
//The encoder will start counting immediately.
//sourceA - The source that should be used for the 'a' channel.
//sourceB - the source that should be used for the 'b' channel.
//indexSource - the source that should be used for the index channel.
//reverseDirection - represents the orientation of the encoder and inverts the output values if necessary so forward represents positive values.

//public Encoder​(DigitalSource sourceA, DigitalSource sourceB, DigitalSource indexSource)
//Encoder constructor. Construct an Encoder given a, b and index channels as digital inputs. This is used in the case where the digital inputs are shared. The Encoder class will not allocate the digital inputs and assume that they already are counted.
//The encoder will start counting immediately.
//sourceA - The source that should be used for the 'a' channel.
//sourceB - the source that should be used for the 'b' channel.
//indexSource - the source that should be used for the index channel.

//////////Methods

/////Used:

//public void reset()
//Reset the Encoder distance to zero. Resets the current count to zero on the encoder.
//Specified by: reset in interface CounterBase

//public double getDistance()
//Get the distance the robot has driven since the last reset as scaled by the value from setDistancePerPulse(double).
//Returns: The distance driven since the last reset

//public void setDistancePerPulse​(double distancePerPulse)
//Set the distance per pulse for this encoder. This sets the multiplier used to determine the distance driven based on the count value from the encoder. Do not include the decoding type in this scale. The library already compensates for the decoding type. Set this value based on the encoder's rated Pulses per Revolution and factor in gearing reductions following the encoder shaft. This distance can be in any units you like, linear or angular.
//distancePerPulse - The scale factor that will be used to convert pulses to useful units.

/////Unused:

//public int getFPGAIndex()
//Get the FPGA index of the encoder.
//Returns: The Encoder's FPGA index.

//public int getEncodingScale()
//Used to divide raw edge counts down to spec'd counts.
//Returns: The encoding scale factor 1x, 2x, or 4x, per the requested encoding type.

//public void close()
//Specified by: close in interface AutoCloseable

//public int getRaw()
//Gets the raw value from the encoder. The raw value is the actual count unscaled by the 1x, 2x, or 4x scale factor.
//Returns: Current raw count from the encoder

//public int get()
//Gets the current count. Returns the current count on the Encoder. This method compensates for the decoding type.
//Specified by: get in interface CounterBase
//Returns: Current count from the Encoder adjusted for the 1x, 2x, or 4x scale factor.

//public boolean getStopped()
//Determine if the encoder is stopped. Using the MaxPeriod value, a boolean is returned that is true if the encoder is considered stopped and false if it is still moving. A stopped encoder is one where the most recent pulse width exceeds the MaxPeriod.
//Specified by: getStopped in interface CounterBase
//Returns: True if the encoder is considered stopped.

//public boolean getDirection()
//The last direction the encoder value changed.
//Specified by: getDirection in interface CounterBase
//Returns: The last direction the encoder value changed.

//public double getRate()
//Get the current rate of the encoder. Units are distance per second as scaled by the value from setDistancePerPulse().
//Returns: The current rate of the encoder.

//public void setMinRate​(double minRate)
//Set the minimum rate of the device before the hardware reports it stopped.
//minRate - The minimum rate. The units are in distance per second as scaled by the value from setDistancePerPulse().

//public double getDistancePerPulse()
//Get the distance per pulse for this encoder.
//Returns: The scale factor that will be used to convert pulses to useful units.

//public void setReverseDirection​(boolean reverseDirection)
//Set the direction sensing for this encoder. This sets the direction sensing on the encoder so that it could count in the correct software direction regardless of the mounting.
//reverseDirection - true if the encoder direction should be reversed

//public void setSamplesToAverage​(int samplesToAverage)
//Set the Samples to Average which specifies the number of samples of the timer to average when calculating the period. Perform averaging to account for mechanical imperfections or as oversampling to increase resolution.
//samplesToAverage - The number of samples to average from 1 to 127.

//public int getSamplesToAverage()
//Get the Samples to Average which specifies the number of samples of the timer to average when calculating the period. Perform averaging to account for mechanical imperfections or as oversampling to increase resolution.
//Returns: SamplesToAverage The number of samples being averaged (from 1 to 127)

//public void setIndexSource​(int channel)
//Set the index source for the encoder. When this source is activated, the encoder count automatically resets.
//channel - A DIO channel to set as the encoder index

//public void setIndexSource​(DigitalSource source)
//Set the index source for the encoder. When this source is activated, the encoder count automatically resets.
//source - A digital source to set as the encoder index

//public void setIndexSource​(int channel, Encoder.IndexingType type)
//Set the index source for the encoder. When this source rises, the encoder count automatically resets.
//channel - A DIO channel to set as the encoder index
//type - The state that will cause the encoder to reset

//public void setIndexSource​(DigitalSource source, Encoder.IndexingType type)
//Set the index source for the encoder. When this source rises, the encoder count automatically resets.
//source - A digital source to set as the encoder index
//type - The state that will cause the encoder to reset

//public void setSimDevice​(SimDevice device)
//Indicates this input is used by a simulated device.
//device - simulated device handle

//public double getDecodingScaleFactor()
//Gets the decoding scale factor for scaling raw values to full counts.
//Returns: decoding scale factor

//public void initSendable​(SendableBuilder builder)
//Description copied from interface: Sendable
//Initializes this Sendable object.
//Specified by: initSendable in interface Sendable
//builder - sendable builder



////////////////////////////////////////Joystick////////////////////////////////////////

//////////Import
//import edu.wpi.first.wpilibj.Joystick;

//////////Constructor
//public Joystick​(int port)
//Construct an instance of a joystick.
//Parameters:
//port - The port index on the Driver Station that the joystick is plugged into.

//////////Methods

/////Used:

/////Unused:

//public void setXChannel​(int channel)
//Set the channel associated with the X axis.
//channel - The channel to set the axis to.

//public void setYChannel​(int channel)
//Set the channel associated with the Y axis.
//channel - The channel to set the axis to.

//public void setZChannel​(int channel)
//Set the channel associated with the Z axis.
//channel - The channel to set the axis to.

//public void setThrottleChannel​(int channel)
//Set the channel associated with the throttle axis.
//channel - The channel to set the axis to.

//public void setTwistChannel​(int channel)
//Set the channel associated with the twist axis.
//channel - The channel to set the axis to.

//public int getXChannel()
//Get the channel currently associated with the X axis.
//Return: The channel for the axis.

//public int getYChannel()
//Get the channel currently associated with the Y axis.
//Returns: The channel for the axis.

//public int getZChannel()
//Get the channel currently associated with the Z axis.
//Returns: The channel for the axis.

//public int getTwistChannel()
//Get the channel currently associated with the twist axis.
//Returns: The channel for the axis.

//public int getThrottleChannel()
//Get the channel currently associated with the throttle axis.
//Returns: The channel for the axis.

//public final double getX()
//Get the X value of the joystick. This depends on the mapping of the joystick connected to the current port.
//Returns: The X value of the joystick.

//public final double getY()
//Get the Y value of the joystick. This depends on the mapping of the joystick connected to the current port.
//Returns: The Y value of the joystick.

//public double getZ()
//Get the z position of the HID.
//Returns: the z position

//public double getTwist()
//Get the twist value of the current joystick. This depends on the mapping of the joystick connected to the current port.
//Returns: The Twist value of the joystick.

//public double getThrottle()
//Get the throttle value of the current joystick. This depends on the mapping of the joystick connected to the current port.
//Returns: The Throttle value of the joystick.

//public boolean getTrigger()
//Read the state of the trigger on the joystick.
//Returns: The state of the trigger.

//public boolean getTriggerPressed()
//Whether the trigger was pressed since the last check.
//Returns: Whether the button was pressed since the last check.

//public boolean getTriggerReleased()
//Whether the trigger was released since the last check.
//Returns: Whether the button was released since the last check.

//public BooleanEvent trigger​(EventLoop loop)
//Constructs an event instance around the trigger button's digital signal.
//loop - the event loop instance to attach the event to.
//Returns: an event instance representing the trigger button's digital signal attached to the given loop.

//public boolean getTop()
//Read the state of the top button on the joystick.
//Returns: The state of the top button.

//public boolean getTopPressed()
//Whether the top button was pressed since the last check.
//Returns: Wether the button was pressed since the last check.

//public boolean getTopReleased()
//Whether the top button was released since the last check.
//Returns: Whether the button was released since the last check.

//public BooleanEvent top​(EventLoop loop)
//Constructs an event instance around the top button's digital signal.
//loop - the event loop instance to attach the event to.
//Returns: an event instance representing the top button's digital signal attached to the given loop.

//public double getMagnitude()
//Get the magnitude of the direction vector formed by the joystick's current position relative to its origin.
//Returns: The magnitude of the direction vector

//public double getDirectionRadians()
//Get the direction of the vector formed by the joystick and its origin in radians.
//Returns: The direction of the vector in radians

//public double getDirectionDegrees()
//Get the direction of the vector formed by the joystick and its origin in degrees.
//Returns: The direction of the vector in degrees



////////////////////////////////////////PWM////////////////////////////////////////

//////////Import

//import edu.wpi.first.wpilibj.PWM;

//////////Constructor

//public PWM​(int channel)
//Allocate a PWM given a channel.
//Checks channel value range and allocates the appropriate channel. The allocation is only done to help users ensure that they don't double assign channels.
//By default, adds itself to SendableRegistry and LiveWindow.
//channel - The PWM channel number. 0-9 are on-board, 10-19 are on the MXP port

//public PWM​(int channel, boolean registerSendable)
//Allocate a PWM given a channel.
//channel - The PWM channel number. 0-9 are on-board, 10-19 are on the MXP port
//registerSendable - If true, adds this instance to SendableRegistry and LiveWindow

//////////Methods

/////Used:

/////Unused:

//public void close()
//Free the resource associated with the PWM channel and set the value to 0.
//Specified by: close in interface AutoCloseable

//public void enableDeadbandElimination​(boolean eliminateDeadband)
//Optionally eliminate the deadband from a motor controller.
//eliminateDeadband - If true, set the motor curve for the motor controller to eliminate the deadband in the middle of the range. Otherwise, keep the full range without modifying any values.

//public void setBounds​(double max, double deadbandMax, double center, double deadbandMin, double min)
//Set the bounds on the PWM pulse widths. This sets the bounds on the PWM values for a particular type of controller. The values determine the upper and lower speeds as well as the deadband bracket.
//max - The max PWM pulse width in ms
//deadbandMax - The high end of the deadband range pulse width in ms
//center - The center (off) pulse width in ms
//deadbandMin - The low end of the deadband pulse width in ms
//min - The minimum pulse width in ms

//public PWMConfigDataResult getRawBounds()
//Gets the bounds on the PWM pulse widths. This gets the bounds on the PWM values for a particular type of controller. The values determine the upper and lower speeds as well as the deadband bracket.
//Returns: The bounds on the PWM pulse widths.

//public int getChannel()
//Gets the channel number associated with the PWM Object.
//Returns: The channel number

//public void setPosition​(double pos)
//Set the PWM value based on a position.
//This is intended to be used by servos.
//pos - The position to set the servo between 0.0 and 1.0.
//Pre-Condition: SetMaxPositivePwm() called., SetMinNegativePwm() called.

//public double getPosition()
//Get the PWM value in terms of a position.
//This is intended to be used by servos.
//Returns: The position the servo is set to between 0.0 and 1.0.
//Pre-Condition: SetMaxPositivePwm() called., SetMinNegativePwm() called.

//public void setSpeed​(double speed)
//Set the PWM value based on a speed.
//This is intended to be used by motor controllers.
//speed - The speed to set the motor controller between -1.0 and 1.0.
//Pre-Condition: SetMaxPositivePwm() called., SetMinPositivePwm() called., SetCenterPwm() called., SetMaxNegativePwm() called., SetMinNegativePwm() called.

//public double getSpeed()
//Get the PWM value in terms of speed.
//This is intended to be used by motor controllers.
//Returns: The most recently set speed between -1.0 and 1.0.
//Pre-Condition: SetMaxPositivePwm() called., SetMinPositivePwm() called., SetMaxNegativePwm() called., SetMinNegativePwm() called.

//public void setRaw​(int value)
//Set the PWM value directly to the hardware.
//Write a raw value to a PWM channel.
//value - Raw PWM value. Range 0 - 255.

//public int getRaw()
//Get the PWM value directly from the hardware.
//Read a raw value from a PWM channel.
//Returns: Raw PWM control value. Range: 0 - 255.

//public void setDisabled()
//Temporarily disables the PWM output. The next set call will re-enable the output.

//public void setPeriodMultiplier​(PWM.PeriodMultiplier mult)
//Slow down the PWM signal for old devices.
//mult - The period multiplier to apply to this channel

//public void setZeroLatch()

//public int getHandle()
//Get the underlying handle.
//Returns: Underlying PWM handle

//public void initSendable​(SendableBuilder builder)
//Description copied from interface: Sendable
//Initializes this Sendable object.
//Specified by: initSendable in interface Sendable
//builder - sendable builder



////////////////////////////////////////Built In Accelerometer////////////////////////////////////////

//////////Import

//import edu.wpi.first.wpilibj.BuiltInAccelerometer;

//////////Constructor

//public BuiltInAccelerometer​(Accelerometer.Range range)
//Constructor.
//range - The range the accelerometer will measure

//public BuiltInAccelerometer()
//Constructor. The accelerometer will measure +/-8 g-forces

//////////Methods

/////Used:

//public double getX()
//The acceleration in the X axis.
//Specified by: getX in interface Accelerometer
//Returns: The acceleration of the roboRIO along the X axis in g-forces

//public double getY()
//The acceleration in the Y axis.
//Specified by: getY in interface Accelerometer
//Returns: The acceleration of the roboRIO along the Y axis in g-forces

/////Unused:

//public void close()
//Specified by: close in interface AutoCloseable

//public void setRange​(Accelerometer.Range range)
//Common interface for setting the measuring range of an accelerometer.
//Specified by: setRange in interface Accelerometer
//range - The maximum acceleration, positive or negative, that the accelerometer will measure. Not all accelerometers support all ranges.

//public double getZ()
//The acceleration in the Z axis.
//Specified by: getZ in interface Accelerometer
//Returns: The acceleration of the roboRIO along the Z axis in g-forces

//public void initSendable​(SendableBuilder builder)
//Initializes this Sendable object.
//Specified by: initSendable in interface Sendable
//builder - sendable builder


















